destroy  破坏

git 软件安装
yum install -y git

外地校区
git clone git://124.193.128.166/nsd1806.git

本地
git clone git://172.40.53.65/nsd1806.git

更新(必须进入 git 目录)
git  pull


实现此案例需要按照如下步骤进行。
步骤一：创建一个名为vbr的虚拟网络
[root@room9pc01 ~]# vim  /etc/libvirt/qemu/networks/vbr.xml
<network>
  <name>vbr</name>                //vbr为虚拟网络的名字
  <bridge name="vbr"/>
  <forward mode="nat"/>
  <ip address="192.168.1.254" netmask="255.255.255.0">        //ip为192.168.1.254
    <dhcp>
      <range start="192.168.1.100" end="192.168.1.200"/>     //ip范围是100-200
    </dhcp>
  </ip>
</network>

步骤二：启动vbr虚拟网络并用ifconfig验证
[root@room9pc01 ~]# virsh net-define vbr        //定义vbr虚拟网络
[root@room9pc01 ~]# virsh net-start vbr      //启动vbr虚拟网络
[root@room9pc01 ~]# ifconfig                //igconfig验证 
vbr: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.1.254  netmask 255.255.255.0  broadcast 192.168.1.255
        ether 52:54:00:b7:1c:10  txqueuelen 1000  (Ethernet)
        RX packets 2460  bytes 176958 (172.8 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 1948  bytes 532542 (520.0 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

virsh net-autostart (--disable)  vbr                   //开启自启(开机不自启)
virsh net-destroy  vbr                                 //关闭网络

5 案例5：安装虚拟机
5.1 问题

本案例要求可以成功安装一个自定义虚拟机：
配置一个网络yum，并安装一个虚拟机
制作一个虚拟机模板，包括配置yum，网卡等
5.2 步骤

实现此案例需要按照如下步骤进行。
步骤一：配置网络yum源

[root@room9pc01 ~]# yum -y install vsftpd
[root@room9pc01 ~]# vim /etc/vsftpd/vsftpd.conf 
listen=YES
listen_ipv6=NO
[root@room9pc01 ~]# systemctl restart vsftpd
[root@room9pc01 ~]# mkdir /var/ftp/centos
[root@room9pc01 ~]# mount /iso/CentOS-7-x86_64-DVD-1708.iso  /var/ftp/centos/
mount: /dev/loop1 写保护，将以只读方式挂载
[root@room9pc01 ~]# vim /etc/yum.repos.d/dvd.repo
[dvd]
name=dvd
baseurl=ftp://192.168.1.254/centos
enabled=1
gpgcheck=0
[root@room9pc01 ~]# yum clean all
[root@room9pc01 ~]# yum repolist

[root@room9pc01 ~]# cd /var/lib/libvirt/images/             //xml文件在该目录下

[root@room9pc01 images]# qemu-img create -f qcow2 node.qcow2 2G       
Formatting 'node.qcow2',fmt=qcow2 size=17179869184 encryption=off cluster_size=65536 lazy_refcounts=off 
[root@room9pc01 images]# qemu-img create -b node.qcow2 -f qcow2 ooxx.img 20G

步骤二：安装一个虚拟机
[root@room9pc01 images]# virt-manager        //真机操作，启动virt-manager

文件->新建虚拟机->网络安装->url:   ftp://192.168.1.254://centos

---->2048------>选择或创建自定义存储-------->名称node----->选择网络vbr----->installation  i will configure
----->选泽根分区


yum provides */ifconfig  ifconfig-config-manager


步骤三：制作一个虚拟机模板
修改ip
nmcli (支持rhel7以上)
yum -y install bridge-utils(网桥) net-tools vim-enhanced psmisc
psmisc包含3个帮助管理/proc目录的程序
1  fuser    显示使用指定文件或者文件系统进程的PID
2  killall  杀死某个名字的进程,他向运行指定命令的所有进程发出信号
3  pstree   树型显示当前运行的进程



1）禁用selinux
[root@localhost ~]# vim /etc/selinux/config
SELINUX=disabled
[root@localhost ~]# systemctl stop/mask firewalld
2）卸载防火墙与NetworkManager
[root@localhost ~]# yum -y remove NetworkManager-* firewalld-* python-firewall

4）导入公钥
注意：把/etc/yum.repos.d/dvd.repo的gpgcheck=0改成gpgcheck=1
[root@localhost ~]# lftp 192.168.1.254
lftp 192.168.4.254:~> cd centos
lftp 192.168.4.254:/centos> get RPM-GPG-KEY-CentOs-7
lftp 192.168.4.254:/centos> exit
[root@localhost ~]# rpm --import RPM-GPG-KEY-CentOs-7
5）配置网卡
[root@node ~]# vim /etc/sysconfig/network-scripts/ifcfg-eth0 

# Generated by dracut initrd
 DEVICE="eth0"
 ONBOOT="yes"                //开机自动启用网络连接
 NM_CONTROLLED="no"          //network mamager的参数，实时生效，不需要重启
 TYPE="Ethernet"
 BOOTPROTO ="dhcp"           //使用none需要手动配置IP(#下面的3项需要自己配置)dhcp自动分配(mac地址具有唯一性,模板机不能有)
# IPADDR="192.168.1.100"
# NETMASK="255.255.255.0"
# GATEWAY="192.168.1.254"

[root@localhost ~]# systemctl restart network
6）禁用空路由
[root@localhost ~]# vim /etc/sysconfig/network
NOZEROCONF="yes"
[root@node ~]# systemctl restart netwourk
[root@node ~]# ip route show

7）添加console配置 (使真机能够console虚拟机)
[root@localhost ~]# vim /etc/default/grub
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR="$(sed 's, release .*$,,g' /etc/system-release)"
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL="serial console"
GRUB_SERIAL_COMMAND="serial --unit=1 --speed=115200"
GRUB_CMDLINE_LINUX="biosdevname=0 net.ifnames=0 console=ttyS0,115200"
GRUB_DISABLE_RECOVERY="true"
GRUB_DISABLE_LINUX_UUID="true"               //不使用uuid(uuid具有唯一性,模板虚拟机不能有)
GRUB_ENABLE_LINUX_LABEL="true"               //
8）重新生成grub.cfg
[root@localhost ~]# grub2-mkconfig   -o  /boot/grub2/grub.cfg
[root@localhost ~]# reboot

9）安装扩展分区软件
[root@localhost ~]# yum  install  -y  cloud-utils-growpart
10）第一次开机自动扩容
[root@localhost ~]# /usr/bin/growpart /dev/vda 1   //可以growpart /dev/vda 1   给vda扩容
[root@localhost ~]# /usr/sbin/xfs_growfs   /        //xfs_growfs  /           给文件系统扩容
         df -h                //查看
11）关闭虚拟机后执行信息清理工作(真机)
[root@room9pc01 ~]# virt-sysprep -d node    //真机上面操作，node为虚拟机名称
[root@room9pc01 ~]# virsh undefine node      //删除虚拟机node

使用后端文件克隆新虚拟机
cd /var/lib/libvirt/images/
[root@room9pc01 images]# qemu-img create -b node.qcow2 -f qcow2 nova01.img 20G   //创建镜像nova01.img
[root@room9pc01 images]# sed 's,node,nova01' /root/node.xml  >  /etc/libvirt/qemu/nova01.xml   //创建nova01配置文件
[root@room9pc01 images]# virsh define /etc/libvirt/qemu/nova01.xml   //创建虚拟机nova01
[root@room9pc01 images]# virsh start nova02                          //启用
[root@room9pc01 images]# virsh console nova02                         //控制
[root@node ~]# growpart /dev/vda 1                                   //给vda扩容
[root@node ~]# xfs_growfs /                                          //文件系统扩容
df -h                                                                //查看
ctrl + ]                                                              //退出

1  后端盘必须是只读的

添加磁盘
[root@room9pc01 images]# qemu-img create  -f  qcow2 disk2.img 20G  //创建空磁盘disk2.img
修改虚拟机配置文件/etc/libvirt/qemu/openstack.xml                     //必须使用virsh edit openstack修改
[root@room9pc01 images]# virsh edit openstack
<disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='/var/lib/libvirt/images/openstack.img'/>
      <target dev='vda' bus='virtio'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0'/>
    </disk>                 //在下面添加
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='/var/lib/libvirt/images/disk2.img'/>           //修改磁盘路径
      <target dev='vdb' bus='virtio'/>                             //新建磁盘名
    </disk>

<interface type='bridge'>                   //添加新网卡
      <source bridge='private1'/>           //新的网卡
      <model type='virtio'/>     
</interface>

查看ifconfig -a

新网卡添加IP
ssh openstack
vim /etc/sysconfig/network-scripts/ifcfg.eth1
 DEVICE="eth1"
 ONBOOT="yes"
 NM_CONTROLLED="no"
 TYPE="Ethernet"
 BOOTPROTO="static"
 IPADDR="192.168.4.11"
 NETMASK="255.255.255.0"
[root@openstack network-scripts]# systemctl restart network




