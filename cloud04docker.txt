
git 软件安装
yum install -y git
外地校区
git clone git://124.193.128.166/nsd1806.git
本地
git clone git://172.40.53.65/nsd1806.git
更新(必须进入 git 目录)
git  pull


 ubuntu  dbgt相当于yum

docker run 创建一个新的前端盘

docker ps -a 查看所有的容器

docker top 容器ID 可以看容器执行了什么命令
docker attach 容器id 进去容器  退出需要按ctrl+p +q


什么是容器
容器技术已成为应用程序封装和交付的核心技术
容器技术的核心由以下几个内核技术组成:
1 Cgroups(control groups) 资源管理
2 NameSpasc               进程隔离
3 selinx安全
由于实在物理机上实施隔离,启动一个容器,可以想启动一个进程一样快速

什么是docker
docker是完整的一套容器管理系统
docker提供了一组命令,让用户更加方便直接地使用容器技术,而不需要过多关心底层内核技术


docker的优点
相比与传统的虚拟化技术,容器更加简洁高效
传统虚拟机需要给每个VM安装操作系统
容器使用的公共库和程序

缺点
容器的隔离性没有虚拟化强
共用linux内核,安全性有先天缺陷
selinux难以驾驭
监控容器和容器排错是挑战





安装docker

环境准备:  需要64位操作系统
           至少RHEL6.5以上的版本,强烈推荐RHEL7
           关闭防火墙(不是必须)

安装docker
软件包列表: docker-engine  docker-engine-selinux


步骤一：配置yum源

1）配置第三方yum源（真机操作）
[root@room9pc01 ~]# mkdir /var/ftp/docker
[root@room9pc01 ~]# mv docker-engine-* /var/ftp/docker
[root@room9pc01 ~]# ls /var/ftp/docker
docker-engine-1.12.1-1.el7.centos.x86_64.rpm
docker-engine-selinux-1.12.1-1.el7.centos.noarch.rpm
[root@room9pc01 ~]# createrepo /var/ftp/docker/

[root@docker01 ~]# vim /etc/yum.repos.d/Centos.repo 
[docker]
name=docker
baseurl=ftp://192.168.1.254/docker
enabled=1
gpgcheck=0  

2）配置IP（虚拟机配置静态ip）docker
[root@docker1 ~]# vim /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE="eth0"
ONBOOT="yes"
IPV6INIT="no"
IPV4_FAILURE_FATAL="no"
NM_CONTROLLED="no"
TYPE="Ethernet"
BOOTPROTO="static"
IPADDR="192.168.1.10"
PREFIX=24
GATEWAY=192.168.1.254

[root@docker1 ~]# systemctl restart network

3）安装docker
[root@docker1 ~]# yum -y install docker-engine
[root@docker1 ~]# systemctl restart docker
[root@docker1 ~]# systemctl enable docker
[root@docker1 ~]# ifconfig     //有docker0说明环境部署完成
[root@docker2 ~]# docker version        //查看版本


镜像基本操作
步骤一：docker镜像

1）下载镜像(需要有外网)
[root@docker1 ~]# docker pull busybox
2）上传镜像 (上传到本地)
[root@docker1 ~]# docker push busybox
3）查看镜像
[root@docker1 ~]# docker images
4）查找busybox镜像
[root@docker1 ~]# docker search busybox
5）导出busybox镜像为busybox.tar
[root@docker1 ~]# docker  save  busybox:latest >busybox.tar

6）导入镜像
[root@docker1 ~]# scp  busybox.tar 192.168.1.20:/root
[root@docker2 ~]# docker load <busybox.tar              //使用tar包导入镜像
7）删除镜像
[root@docker2 ~]# docker rmi  busybox

步骤二：一次性导入多个镜像

[root@docker1 ~]# yum -y install unzip
[root@docker1 ~]# unzip docker_images.zip 
[root@docker1 ~]# cd docker_images
[root@docker1 docker_images]# ls
centos.tar  nginx.tar  redis.tar  registry.tar  ubuntu.tar
[root@docker1 docker_images]# for i in *; do docker load <$i; done
[root@docker1 docker_images]# docker images         //查看docker镜像
[root@docker01 docker_images]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
busybox             latest              59788edf1f3e        2 weeks ago         1.154 MB
ubuntu              latest              452a96d81c30        5 months ago        79.62 MB
centos              latest              e934aafc2206        6 months ago        198.6 MB
registry            latest              d1fd7d86a825        9 months ago        33.26 MB
nginx               latest              a5311a310510        2 years ago         181.4 MB
redis               latest              1aa84b1b434e        2 years ago         182.8 MB

步骤三：启动镜像

1）启动centos镜像生成一个容器
启动镜像时若不知道后面的命令加什么:
1、可以猜（如：/bin/bash、/bin/sh）
2、可以不加后面的命令，默认启动
[root@docker1 docker_images]# docker run -it centos /bin/bash

[root@7a652fc72a9f /]# vim /etc/yum.repos.d/dvd.repo  //给容器安装yum源
[local]
name=local
baseurl=ftp://192.168.1.254/docker
enable=1
gpgcheck=0

[root@7a652fc72a9f yum.repos.d]# yum -y install net-tools  //安装软件

步骤一：镜像常用命令
[root@docker01 docker_images]# docker run -it nginx /bin/bash   //启动nginx的镜像

docker images   查看镜像列表
docker history+镜像名   查看镜像制作历史
docker inspect+镜像名   查看镜像详细信息
docker rmi    +镜像名   删除镜像(删除之前必须先删容器)
docker tag  centos:latest cen:v1  修改镜像centos标签latest 为镜像cen标签v1


容器常用命令 (命令后加上的都是容器id) 
 docker run -it     //运行容器
 docker ps -qa      //查看所有容易的id
 docker stop/start/restart 
 docker attach/exec   //进入容器  attach进入容器,exit会导致容器关闭  exec进入相反
 docker inspect       //查看容器详细信息
 docker top           //查看容器进程列表
 docker rm            //删除容器
 docker rm `docker ps -aq`  //删除所有的容器(删除前必须先关闭容器)







